{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1d8d3287\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"send-box\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"form-label\",\n  class: \"form-label\"\n}, \"Napisz wiadomość\", -1 /* HOISTED */));\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"btn-box\"\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn send-button\",\n  type: \"submit\"\n}, \"Wyślij\")], -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"chat-box\", [$props.isPreview ? '' : 'none']])\n  }, [_createElementVNode(\"form\", {\n    class: \"send-form\",\n    novalidate: \"\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers($event => _ctx.$emit('createRoom'), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"send-input input\",\n    value: $props.roomName,\n    autocomplete: \"off\",\n    placeholder: \"Npaisz wiadomość\",\n    onInput: _cache[0] || (_cache[0] = event => _ctx.$emit('update:roomName', event.target.value))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), $props.errorSendMsg ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _toDisplayString($props.errorSendMsg), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _hoisted_5], 32 /* HYDRATE_EVENTS */)], 2 /* CLASS */);\n}","map":{"version":3,"mappings":";;;EAGWA,KAAK,EAAC;AAAU;gEACnBC,oBAAmE;EAA5DC,GAAG,EAAC,YAAY;EAACF,KAAK,EAAC;GAAa,kBAAgB;;;;EASlCA,KAAK,EAAC;;gEAIjCC,oBAEM;EAFDD,KAAK,EAAC;AAAS,iBAClBC,oBAA6D;EAArDD,KAAK,EAAC,iBAAiB;EAACG,IAAI,EAAC;GAAS,QAAM;;;uBAjB1DC,oBAoBM;IApBDJ,KAAK,mBAAC,UAAU,GAAUK,gBAAS;MACtCJ,oBAkBO;IAlBDD,KAAK,EAAC,WAAW;IAACM,UAAU,EAAV,EAAU;IAAEC,QAAM,qDAAUC,UAAK;MACvDP,oBAaM,OAbNQ,UAaM,GAZJC,UAAmE,EACnET,oBAOE;IANAE,IAAI,EAAC,MAAM;IACXH,KAAK,EAAC,kBAAkB;IACvBW,KAAK,EAAEN,eAAQ;IAChBO,YAAY,EAAC,KAAK;IAClBC,WAAW,EAAC,kBAAkB;IAC7BC,OAAK,4BAAGC,KAAK,IAAKP,UAAK,oBAAoBO,KAAK,CAACC,MAAM,CAACL,KAAK;wDAErDN,mBAAY,kBAAvBD,oBAEM,OAFNa,UAEM,mBADDZ,mBAAY,yDAGnBa,UAEM","names":["class","_createElementVNode","for","type","_createElementBlock","$props","novalidate","onSubmit","_ctx","_hoisted_1","_hoisted_2","value","autocomplete","placeholder","onInput","event","target","_hoisted_4","_hoisted_5"],"sourceRoot":"","sources":["/home/ubuntu/Escritorio/isucorp/client/src/components/createRoom.vue"],"sourcesContent":["<template>\n  <div class=\"chat-box\" :class=\"[isPreview ? '' : 'none']\">\n    <form class=\"send-form\" novalidate @submit.prevent=\"$emit('createRoom')\">\n      <div class=\"send-box\">\n        <label for=\"form-label\" class=\"form-label\">Napisz wiadomość</label>\n        <input\n          type=\"text\"\n          class=\"send-input input\"\n          :value=\"roomName\"\n          autocomplete=\"off\"\n          placeholder=\"Npaisz wiadomość\"\n          @input=\"(event) => $emit('update:roomName', event.target.value)\"\n        />\n        <div v-if=\"errorSendMsg\" class=\"error-message\">\n          {{ errorSendMsg }}\n        </div>\n      </div>\n      <div class=\"btn-box\">\n        <button class=\"btn send-button\" type=\"submit\">Wyślij</button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { ref, nextTick, onUpdated } from 'vue'\n\nexport default {\n  props: {\n    isPreview: {\n      type: Boolean,\n      required: true,\n    },\n    roomName: {\n      type: String,\n      required: false,\n    },\n    messages: {\n      type: Array,\n      required: true,\n    },\n    message: {\n      type: String,\n      required: false,\n    },\n    isTyping: {\n      type: Boolean,\n      required: true,\n    },\n    userId: {\n      type: String,\n      required: true,\n    },\n    errorSendMsg: {\n      type: String,\n      required: true,\n    },\n  },\n  emits: [\n    'sendMessage',\n    'update:message',\n    'validateMessage',\n    'createRoom',\n    'update:roomName',\n  ],\n  setup() {\n    let chatArea = ref(null)\n    let refscrollHeight = ref(null)\n\n    const update = () => {\n      nextTick(() => {})\n    }\n\n    onUpdated(update)\n\n    return {\n      update,\n      chatArea,\n      refscrollHeight,\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.chat-box {\n  width: 100%;\n  height: 100%;\n  margin: 1rem;\n  .chat-area {\n    width: 100%;\n    height: 100%;\n    box-shadow: 7px 5px 46px -16px $accent_color;\n    border: 2px solid $accent_color;\n    background-color: rgba($accent_color, 0.1);\n    overflow: auto;\n    .chat-message-item {\n      height: auto;\n      display: flex;\n      flex-direction: column;\n      justify-content: flex-end;\n      color: #000;\n      overflow: auto;\n      .message-item {\n        display: inline-flex;\n        margin: 0.5rem 1rem;\n        .message-text {\n          background-color: rgba($accent_color, 0.5);\n          margin-top: 0;\n          text-align: left;\n          padding: 0.8rem;\n        }\n        .message-user {\n          display: flex;\n          text-align: left;\n          padding: 0.5rem;\n        }\n        .message-date {\n          font-weight: 200;\n        }\n      }\n    }\n    .message-is-typing {\n      font-weight: 600;\n      padding: 1rem;\n      text-align: left;\n    }\n  }\n  /*********SEND_MESSAGE*************/\n\n  .send-form {\n    width: 100%;\n    @include flex;\n    .send-box {\n      display: flex;\n      justify-content: center;\n      flex-direction: column;\n      align-items: center;\n      width: 60%;\n      margin: 1rem 1rem;\n      padding: 1rem 0;\n      .send-input {\n        width: 100%;\n      }\n    }\n    .btn-box {\n      width: 40%;\n      .send-button {\n        width: 100%;\n        padding: 1rem;\n      }\n    }\n  }\n}\n\n/*******MEDIA_QUERY*************/\n\n@include smallerPhone {\n  .chat-box {\n    width: 100%;\n  }\n}\n// @include mostPhone {\n//   .chat-box {\n//   }\n// }\n@include smallerDesktop {\n  .chat-box {\n    width: 100%;\n  }\n}\n\n@media (max-width: 900px) {\n  .users-box {\n    width: 100%;\n  }\n}\n\n@include mostTablets {\n}\n@media (min-width: 900px) {\n  .users-box {\n    display: block;\n  }\n  .chat-box {\n    display: block;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}